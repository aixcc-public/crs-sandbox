name: Create and publish a Docker images for the CRS
permissions: read-all
# Configures this workflow to run every time a release is published
on:
  release:
    types: [published]

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io

# There is a single job in this workflow.
jobs:
  build-and-push-image:
    runs-on: large-runner
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    strategy:
      fail-fast: false
      matrix:
        # COMPETITORS: Update this list of docker files to include all images needed for your CRS
        # These images will be copied into your CRS execution environment at competition time
        # REMINDER: A CRS WILL NOT have internet access beyond iAPI and LiteLLM, so all containers images MUST be able to run without internet access. 
        # You MUST include your specific private CRS repo prefix so replace `ghcr.io/aixcc-sc/crs-sandbox` with `ghcr.io/aixcc-sc/crs-XXXXXXXX` or whatever
        # your private CRS repo is called but only for containers you are adding or those container images.

        # DO NOT add version labels here. That should be managed using the Github release process in your CRS repo. 
        # Please see: https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
        

        include:
          - dockerfile: ./crs/src/Dockerfile
            image: ghcr.io/aixcc-sc/crs-sandbox/mock-crs
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # important parameter
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ matrix.image }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64
          curl https://mise.jdx.dev/install.sh | sh
          echo "$HOME/.local/share/mise/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/mise/shims" >> $GITHUB_PATH
          mise install

      - name: Create Competition Helm Resources
        run: |
          make k8s/competition

      - name: Modify Generated Helm Chart
        run: |
          # Variables for new values
          NEW_DESCRIPTION="AIxCC Competitor Cyber Reasoning System (CRS)"
          NEW_NAME="crs"
          VERSION_STRING=${{ github.event.release.tag_name }}
          NEW_VERSION="${VERSION_STRING#v}"

          # Path to the generated Chart.yaml
          CHART_FILE=".k8s/Chart.yaml"

          # Modify Chart.yaml using yq
          yq eval ".description = \"$NEW_DESCRIPTION\"" -i $CHART_FILE
          yq eval ".name = \"$NEW_NAME\"" -i $CHART_FILE
          yq eval ".version = \"$NEW_VERSION\"" -i $CHART_FILE

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: .k8s
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_RELEASE_NAME_TEMPLATE: "crs"
          CR_OWNER: aixcc
          CR_PACKAGE_PATH: .k8s
          CR_SKIP_EXISTING: false
          CR_PACKAGES_WITH_INDEX: true
